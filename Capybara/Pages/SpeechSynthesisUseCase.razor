@page "/SpeechSynthesis"

@inject HttpClient Http

@inject NavigationManager NavigationManager
@using Color =MudBlazor.Color

<br />
<MudGrid>
    <MudItem xs="12" md="12" lg="12">
        <a href="https://github.com/jsakamoto/Toolbelt.Blazor.SpeechSynthesis" target="_blank">
            <img src="https://img.shields.io/static/v1?label=BlazorSpeechSynthesis&message=%E2%9D%A4&logo=GitHub&color=ff69b4" />
        </a>
        <a href="https://www.nuget.org/packages/Toolbelt.Blazor.SpeechSynthesis/" target="_blank">
            <img src="https://img.shields.io/nuget/v/Toolbelt.Blazor.SpeechSynthesis.svg" alt="NuGet Package" />
        </a>
        <p>
            <MudTextField T="string" AutoGrow Lines="10" 
                Label="Insert text that you when to generate synthesis voice" 
                Variant="Variant.Outlined" @bind-Value="@Text" ></MudTextField>
        </p>
        <p>
            <MudButton Variant="Variant.Filled" OnClick="ClearAllText" Color="Color.Warning">Clear All Text</MudButton>

        </p>

        @if (Voices.Any())
        {
            <p>
                Voice:
                <select @onchange="OnChangeVoice" style="max-width:100%;">
                    <option value="@(default(string))">(unset)</option>
                    @foreach (var voice in Voices.OrderBy(v => v.Lang).ThenBy(v => v.VoiceURI))
                    {
                        <option @key="voice.VoiceIdentity" value="@voice.VoiceIdentity" selected="@(voice.VoiceIdentity == this.VoiceId)">@voice.Name (@voice.Lang)</option>
                    }
                </select>
            </p>
        }
        <MudGrid>
            <MudItem xs="12" md="12" lg="12">

                <MudButton Variant="Variant.Filled" OnClick="OnClickSpeakButton" Color="Color.Success">Speak</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnClickSpeakByCachedButton">Speak by Cached</MudButton>
            </MudItem>
            <MudItem xs="12" md="12" lg="12">

                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="OnClickPauseButton">Pause</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnClickResumeButton">Resume</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="OnClickCancelButton">Cancel</MudButton>
            </MudItem>
            <MudItem xs="12" md="12" lg="12">
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="OnClickGC">GC</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="OnClickClearLog">Clear Log</MudButton>

            </MudItem>

        </MudGrid>


        <section>
            <p>Voice options</p>
            <div style="display:flex; justify-content:space-between; flex-wrap:wrap;">
                <div>Language (BCP47): <input type="text" @bind="Lang" /></div>
                <div>Picth: @Pitch.ToString("0.0") <input type="range" min="0.0" max="2.0" step="0.1" @bind="Pitch" /> <button @onclick="(() => this.Pitch = 1.0)">reset</button></div>
                <div>Rate: @Rate.ToString("0.0") <input type="range" min="0.1" max="10.0" step="0.1" @bind="Rate" /> <button @onclick="(() => this.Rate = 1.0)">reset</button></div>
                <div>Volume: @Volume.ToString("0.0") <input type="range" min="0.0" max="1.0" step="0.1" @bind="Volume" /> <button @onclick="(() => this.Volume = 1.0)">reset</button></div>
            </div>
        </section>
        <section class="status">
            <p>Status</p>
            <div class="indicators">
                <div class="@V2.CssClass(new { Active = this.Available })">Available</div>
                <div class="@V2.CssClass(new { Active = this.SpeechSynthesis.Speaking })">Speaking</div>
                <div class="@V2.CssClass(new { Active = this.SpeechSynthesis.Pending })">Pending</div>
                <div class="@V2.CssClass(new { Active = this.SpeechSynthesis.Paused })">Paused</div>
            </div>
        </section>
    </MudItem>


</MudGrid>
