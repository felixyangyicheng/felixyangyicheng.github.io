@page "/dominoboard"

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDialogService Dialog
<MudContainer>

	<MudPaper MaxWidth="79vw">

		<MudDropContainer T="DominoDropItem" Items="_items" ApplyDropClassesOnDragStarted="_applyDropClassesOnDragStarted"
						  ItemsSelector="@((item,dropzone) => item.Place == dropzone)" CanDropClass="mud-border-success" NoDropClass="mud-border-error"
						  ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1"
						  Style="height:80vh; max-width:79vw">
			<ChildContent>


				<MudGrid>
					<MudItem xs="12">
						<MudGrid>
							<MudItem xs="12">


							</MudItem>

							<MudItem xs="12">
								<MudDropZone T="DominoDropItem" Identifier="First" CanDrop="@((item) => item.IsPicked == false && (item.Domino.Value1 == ValueFirst||item.Domino.Value2==ValueFirst))"
											 Class="rounded-lg border-1 border-dashed pa-3">

								</MudDropZone>
								@foreach (var piece in dominoPieces.Select((value, i) => new { i, value }))
								{

									if (piece.i % 12 == 0)
									{
										<MudPaper Class="d-flex flex-row" MaxWidth="79vw" Elevation="0">

											@for (int j = piece.i; j < piece.i + 6 && j < dominoPieces.Count; j++)
											{
												var currentPiece = dominoPieces.Skip(j).First();
												var temp = 0;
												var first = GetLinkListFirstPlayableValue();
												var v1 = currentPiece.Domino.Value1;
												var v2 = currentPiece.Domino.Value2;

												if (v2 == first)
												{
													temp = v1;
													v1 = v2;
													v2 = temp;
												}
												<Piece Domino="@currentPiece.Domino" Class="@currentPiece.Class" />

											}
										</MudPaper>
									}
									else if (piece.i % 12 == 6)
									{
										<MudPaper Class="d-flex flex-row-reverse " Elevation="0">
											@for (int j = piece.i; j < piece.i + 6 && j < dominoPieces.Count; j++)
											{
												var currentPiece = dominoPieces.Skip(j).First();
												var temp = 0;
												var last = GetLinkListLastPlayableValue();
												var v1 = currentPiece.Domino.Value1;
												var v2 = currentPiece.Domino.Value2;

												if (v1 == last)
												{
													temp = v2;
													v2 = v1;
													v1 = temp;
												}

												<Piece Domino="new Domino(v1, v2)" Class="flex-row-reverse" />

											}
										</MudPaper>
									}


								}
								<MudDropZone T="DominoDropItem" Identifier="Last" CanDrop="@((item) => item.IsPicked == false && (item.Domino.Value1 == ValueLast||item.Domino.Value2==ValueLast))"
											 Class="rounded-lg border-1 border-dashed pa-3 ">

								</MudDropZone>


								dominoPieces.Skip(j).First();
							</MudItem>
							<MudItem xs="12">


								<MudDropZone T="DominoDropItem" Identifier="Hand" CanDrop="@((item) => false)" Class="rounded-lg border-1 border-solid mud-border-lines-default pa-2 flex-grow-1 d-flex">

								</MudDropZone>
							</MudItem>

						</MudGrid>
					</MudItem>




				</MudGrid>
			</ChildContent>
			<ItemRenderer>
				<MudPaper Class="d-flex flex-row-reverse" Elevation="0">
					@if (context.IsPicked)
					{

					}
					else
					{

						<MudBadge Visible="true" Overlap="true" Icon="@Icons.Material.Rounded.Circle" Color="Color.Success">
							<Piece Domino="@context.Domino" Class="pieceBorderVertical align-self-center" />
						</MudBadge>
					}
				</MudPaper>
			</ItemRenderer>
		</MudDropContainer>

	</MudPaper>
</MudContainer>

@code {
	private bool _applyDropClassesOnDragStarted = true;

	private void Reset()
	{
		foreach (var item in _items)
		{
			item.Place = "Hand";
			item.IsPicked = false;
		}
	}

	private void ItemUpdated(MudItemDropInfo<DominoDropItem> dropItem)
	{

		if (dropItem.Item is null)
		{
			throw new ArgumentNullException(nameof(dropItem.Item));
		}
		else
		{

			dropItem.Item.IsPicked = true;
			dropItem.Item.Place = dropItem.DropzoneIdentifier;
		}
		if (dropItem.Item.Place == "Last")
		{
			AddDominoToLast(dropItem.Item.Domino);
		}
		else if (dropItem.Item.Place == "First")
		{
			AddDominoToFirst(dropItem.Item.Domino);
		}
	}

	private List<DominoDropItem> _items = new()
		{
			new DominoDropItem() { Domino =new Domino(8,9), Color = Color.Error, IsRotten = false, Place = "Hand" },
			new DominoDropItem() { Domino = new Domino(6,9), Color = Color.Warning, IsRotten = false, Place = "Hand" },
			new DominoDropItem() { Domino = new Domino(0,9), Color = Color.Secondary, IsRotten = true, Place = "Hand" },
			new DominoDropItem() { Domino = new Domino(0,9), Color = Color.Success, IsRotten = false, Place = "Hand" },
			new DominoDropItem() { Domino = new Domino(2,9), Color = Color.Info, IsRotten = true, Place = "Hand" },
		};

	public class DominoDropItem
	{
		public Domino Domino { get; init; } = default!;
		public Color Color { get; init; }
		public bool IsRotten { get; set; }
		public bool IsPicked { get; set; }
		public string Place { get; set; } = "";
	}
}
