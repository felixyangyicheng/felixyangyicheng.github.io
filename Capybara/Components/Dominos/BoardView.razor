@page "/dominoboard"

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IDialogService Dialog

<MudPaper MaxWidth="75vw">

<MudDropContainer T="DropItem" Items="_items" ApplyDropClassesOnDragStarted="_applyDropClassesOnDragStarted"
				  ItemsSelector="@((item,dropzone) => item.Place == dropzone)" CanDropClass="mud-border-success" NoDropClass="mud-border-error"
				  ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1"
Style="height:80vh; width:75vw">
	<ChildContent>
		<MudDropZone T="DropItem" Identifier="Dinner" CanDrop="@((item) => item.IsPicked == false && item.IsRotten == false)"
					 Style="position:absolute;top:10%; left: 10%;" Class="rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8 flex-grow-1">
			<MudText Typo="Typo.h6" Class="mb-4">Soup</MudText>
		</MudDropZone>
		@foreach (var piece in dominoPieces.Select((value, i) => new { i, value }))
		{
			if (piece.i % 12 == 0 || piece.i % 12 == 6) // New row every 12 pieces
			{
				if (piece.i % 12 == 0)
				{
						<MudPaper Class="d-flex flex-row" MaxWidth="75vw" Elevation="0">
						@for (int j = piece.i; j < piece.i + 5 && j < dominoPieces.Count; j++)
						{
							var currentPiece = dominoPieces.Skip(j).First();

							<Piece Domino="@currentPiece.Domino" Class="@currentPiece.Class" />

						}
					</MudPaper>
				}
				else if (piece.i % 12 == 6)
				{
					<MudPaper Class="d-flex flex-row-reverse flex-grow-1" Elevation="0">
						@for (int j = piece.i; j < piece.i + 5 && j < dominoPieces.Count; j++)
						{
							var currentPiece = dominoPieces.Skip(j).First();

							<Piece Domino="@currentPiece.Domino" Class="@currentPiece.Class" />

						}
					</MudPaper>
				}
			}
			else if (piece.i % 12 == 5) // One piece on the left
			{
				<MudPaper Class="d-flex flex-row-reverse flex-grow-1" Elevation="0">

					<Piece Domino="@piece.value.Domino" Class="pieceBorderVertical align-self-center" />

				</MudPaper>
			}
			else if (piece.i % 12 == 11) // One piece on the right
			{
				<MudPaper Class="d-flex flex-row flex-grow-1" Elevation="0">

						<Piece Domino="@piece.value.Domino" Class="pieceBorderVertical align-self-center" />
				</MudPaper>
			}
		}
		<MudDropZone T="DropItem" Identifier="Trash" CanDrop="@((item) => item.IsPicked == false && item.IsRotten == true)"
						 Style=" position:absolute;bottom:20%; right: 10%; max-width:750px" Class="rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1">
			<MudText Typo="Typo.h6" Class="mb-4">Trash</MudText>
		</MudDropZone>
		<div class="d-flex flex-wrap justify-space-between">


		</div>
		<MudDropZone T="DropItem" Identifier="Fridge" CanDrop="@((item) => false)" Class="rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8 flex-grow-1 d-flex flex-wrap">
			<MudText Typo="Typo.h6" Class="mb-4">Fridge</MudText>
		</MudDropZone>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Height="54px" Width="54px" Class="pa-2" Elevation="0">
			<MudBadge Visible="@(context.IsRotten ? true : false)" Overlap="true" Icon="@Icons.Custom.Uncategorized.Bacteria" Color="Color.Dark">
				<MudIcon Icon="@context.Icon" Color="@context.Color" Size="Size.Large" />
			</MudBadge>
		</MudPaper>
	</ItemRenderer>
</MudDropContainer>

</MudPaper>

<p>First Playable: @ValueFisrt</p>
<p>Last Playable: @ValueLast</p>
<p>No Playable: @NoPlaybaleText</p>

<MudButton OnClick="e=>AddDomino(new Domino(6,6))">Add</MudButton>
@code {
	private bool _applyDropClassesOnDragStarted = false;

	private void Reset()
	{
		foreach (var item in _items)
		{
			item.Place = "Fridge";
			item.IsPicked = false;
		}
	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.IsPicked = true;
		dropItem.Item.Place = dropItem.DropzoneIdentifier;
	}

	private List<DropItem> _items = new()
		{
			new DropItem() { Icon = @Icons.Custom.Uncategorized.FoodApple, Color = Color.Error, IsRotten = false, Place = "Fridge" },
			new DropItem() { Icon = @Icons.Custom.Uncategorized.Baguette, Color = Color.Warning, IsRotten = false, Place = "Fridge" },
			new DropItem() { Icon = @Icons.Custom.Uncategorized.Sausage, Color = Color.Secondary, IsRotten = true, Place = "Fridge" },
			new DropItem() { Icon = @Icons.Custom.Uncategorized.WaterMelon, Color = Color.Success, IsRotten = false, Place = "Fridge" },
			new DropItem() { Icon = @Icons.Custom.Uncategorized.Fish, Color = Color.Info, IsRotten = true, Place = "Fridge" },
		};

	public class DropItem
	{
		public string Icon { get; init; }
		public Color Color { get; init; }
		public bool IsRotten { get; set; }
		public bool IsPicked { get; set; }
		public string Place { get; set; }
	}
}
