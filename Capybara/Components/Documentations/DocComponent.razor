@page "/tutos/{TypeName}/{MarkDownName}"
@inject IConfiguration _configuration

<MudContainer>
    @if (loading)
    {

        <Pulse />
    }
    <div style="width: 100%; height: 70vh;">
        <Markdown @ref="MarkdownSetValue" Value="@MarkdownString" ValueChanged="SetMarkdownString" @bind-Html="@HtmlString" IsViewer="true" />

    </div>
</MudContainer>

@code {
    [Parameter]
    public string? MarkDownName { get; set; } = "";
    public string? TypeName { get; set; } = "";
    private string? MarkdownString { get; set; } = "### README.md";
    private string? HtmlString { get; set; }
    private bool loading { get; set; }
    StringBuilder rawStringBuilder = new StringBuilder("");
    [NotNull]
    private Markdown? MarkdownSetValue { get; set; }

    protected async Task SetMarkdownString(string text)
    {
        MarkdownString = text;
        await InvokeAsync(StateHasChanged);

    }
    protected override async Task OnParametersSetAsync()
    {
        loading = true;
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"{_configuration["raw.githubusercontent.master"]}/{TypeName}/{MarkDownName}.md");
        var result = await client.GetAsync("");
        using (StreamReader readtext = new StreamReader(await result.Content.ReadAsStreamAsync()))
        {
            while (!readtext.EndOfStream)
            {
                rawStringBuilder.Append("\r " + readtext.ReadLine());
            }
            loading = false;
        }

        await Task.Delay(600);
        await MarkdownSetValue.SetValue(rawStringBuilder.ToString());

        StateHasChanged();

    }



}
